import { MemoPayload, MemoResponse } from "./types";
import { detectHost } from "./util"; // Убедитесь, что этот импорт присутствует

export const sendMemoRequest = async (
  payload: MemoPayload
): Promise<MemoResponse> => { // <--- ИЗМЕНЕНО: УДАЛЕНО "| null"
  try {
    const host = await detectHost();
    const response = await fetch(`${host}/api/generate_memo`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      console.error(`Error ${response.status}: ${response.statusText}`);
      const errorData = await response.json();
      console.error("Error details:", errorData);
      // Возвращаем MemoResponse с сообщением об ошибке
      return { memo_text: `Error: ${errorData.memo_text || "Failed to generate memo."}` };
    }

    const data: MemoResponse = await response.json();
    return data;
  } catch (error) {
    console.error("Error sending memo request", error);
    let errorMessage = "Network or unexpected error.";

    // Это исправление из предыдущего шага для безопасного доступа к 'error.message'
    if (error instanceof Error) {
      errorMessage = error.message;
    } else if (typeof error === 'string') {
      errorMessage = error;
    } else if (error && typeof error === 'object' && 'message' in error) {
      errorMessage = (error as { message: string }).message;
    }

    // Возвращаем MemoResponse с сообщением об ошибке
    return { memo_text: `Error: ${errorMessage}` };
  }
};
